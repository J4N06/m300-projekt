name: Terraform Deploy

on:
  workflow_dispatch:

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    env:
      TF_VAR_k8s_ssh_public_key: ${{ secrets.K8S_SSH_PUBLIC_KEY }}

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Terraform vorbereiten
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: AWS-Zugang konfigurieren
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply (Auto-Approve)
        run: terraform apply -auto-approve

      - name: Get Public IPs from Terraform
        id: get_ips
        run: |
          IPS=$(terraform output -json instance_public_ips | jq -r '.[]' | paste -sd "," -)
          echo "PUB_DNS=$IPS" >> $GITHUB_ENV

      - name: Schreibe SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.K8S_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Kopiere SSH Public Key auf alle Instanzen
        run: |
          PUBKEY="${{ secrets.K8S_SSH_PUBLIC_KEY }}"
          for ip in $(echo $PUB_DNS | tr "," "\n"); do
            echo "Waiting for SSH on $ip..."
            for i in {1..15}; do
              ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i ~/.ssh/id_rsa ubuntu@$ip "echo SSH ready" && break
              echo " Attempt $i: SSH not ready yet..."
              sleep 10
            done

            echo "Füge Public Key zu $ip hinzu (falls nötig)..."
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$ip "\
              mkdir -p ~/.ssh && \
              grep -qxF \"$PUBKEY\" ~/.ssh/authorized_keys || echo \"$PUBKEY\" >> ~/.ssh/authorized_keys && \
              chmod 600 ~/.ssh/authorized_keys"
          done

      - name: Ansible Inventory generieren
        run: |
          IFS=',' read -r MASTER WORKER1 WORKER2 <<< "$PUB_DNS"

          mkdir -p ../ansible
          echo "[master]" > ../ansible/inventory.ini
          echo "$MASTER ansible_user=ubuntu" >> ../ansible/inventory.ini

          echo "[worker]" >> ../ansible/inventory.ini
          echo "$WORKER1 ansible_user=ubuntu" >> ../ansible/inventory.ini
          echo "$WORKER2 ansible_user=ubuntu" >> ../ansible/inventory.ini

          echo "[all:vars]" >> ../ansible/inventory.ini
          echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ../ansible/inventory.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> ../ansible/inventory.ini

      - name: Setze MASTER_IP aus Terraform Output
        id: get_master_ip
        working-directory: terraform
        run: |
          echo "MASTER_IP=$(terraform output -raw master_public_ip)" >> $GITHUB_ENV

      - name: Ansible installieren
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Ansible Playbook ausführen
        run: |
          cd ../ansible
          ansible-playbook -i inventory.ini playbook.yml

      - name: "Debug: Zeige MASTER_IP"
        run: |
          echo "Master-IP ist: $MASTER_IP"


      - name: kubeconfig vom Master holen
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@$MASTER_IP:/home/ubuntu/.kube/config kubeconfig
          base64 kubeconfig > kubeconfig.b64
          cat kubeconfig.b64

      - name: Lade kubeconfig.b64 als Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: kubeconfig.b64